<?php

declare(strict_types=1);

namespace Zenigata\Testing\Http;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\MiddlewareInterface;
use Psr\Http\Server\RequestHandlerInterface;

/**
 * Fake implementation of {@see MiddlewareInterface} (PSR-15).
 *
 * This middleware delegates the incoming request to the next handler without applying
 * any real processing logic by default. 
 * 
 * It provides overridable hook methods that let subclasses intercept the request/response
 * lifecycle to add custom logic, which is particularly handy in testing
 * when using anonymous classes to reduce boilerplate code.
 */
class FakeMiddleware implements MiddlewareInterface
{
    /**
     * Processes an incoming server request and delegates to the next handler.
     *
     * @param ServerRequestInterface  $request Incoming server request.
     * @param RequestHandlerInterface $handler Next request handler to delegate to.

     * @return ResponseInterface The response generated by the next handler.
     */
    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface
    {
        $this->onHandle($request, $handler);

        $response = $handler->handle($request);

        $this->onResponse($response, $handler);

        return $response;
    }

    /**
     * Hook invoked before delegating the request to the next handler.
     * 
     * @param ServerRequestInterface  $request The incoming request.
     * @param RequestHandlerInterface $handler The handler that will handle the request.
     */
    protected function onHandle(ServerRequestInterface $request, RequestHandlerInterface $handler): void
    {
        // Override in subclass to customize behavior
    }

    /**
     * Hook invoked before returning the response.
     * 
     * @param ResponseInterface       $response The outgoing response.
     * @param RequestHandlerInterface $handler  The handler that produced the response.
     */
    protected function onResponse(ResponseInterface $response, RequestHandlerInterface $handler): void 
    {
        // Override in subclass to customize behavior
    }
}
